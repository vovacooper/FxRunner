//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;


public class FXRoad
{
	private IRoadFunction _fx;
	public IRoadFunction fx{
		get{
			return _fx;
		}
	}
	///The size of the line
	private float _lineSize;
	public float lineSize {
		get {
			return _lineSize;
		}
	}

	///the material for the line's
	private Material _lineMaterial;
	public Material lineMaterial {
		get {
			return _lineMaterial;
		}
	}
	
	/// The obsticle prefab.
	private GameObject[] _obsticlePrefabList;
	public GameObject[] obsticlePrefabList{
		get{
			return _obsticlePrefabList;
		}
	}


	//How many lines to remember in history
	private int _historySize;
	public int historySize {
		get {
			return _historySize;
		}
	}

	//List of LineFrame which contain all the lines in a Frame
	private List<LineFrame>  _FrameLineList;
	//List of point's in a frame
	private List<PointFrame> _FramePointList;

	//The nunmber of points in one frame
	private int _numOfHorizontalPointsInRoad;
	public int numOfHorizontalPointsInRoad{
		get{
			return _numOfHorizontalPointsInRoad;
		}
	}



	private float _step;
	/// <summary>
	/// The distance berween Frames.
	/// </summary>
	public float step{
		get{
			return _step;
		}
	}
	///The width of the road
	private float _roadWidth;
	public float roadWidth{
		get{
			return _roadWidth;
		}
	}

	//the parent gameobject for the lines and objects
	private Transform _parent;
	public Transform parent{
		get{
			return _parent;
		}
	}

	private int _numOfLiveLines = 0;
	public int numOfLiveLines{
		get {
			return _numOfLiveLines;
		}
	}

	public int numOfLiveObjects{
		get {
			return _numOfLiveLines + PointFrame.numOfInstatiatedPrefabs;
		}
	}
	
	/***********************************************************
	**	Ctor's
	***********************************************************/
	public FXRoad (IRoadFunction fx ,
	               float roadWidth ,
	               float lineSize , 
	               Material lineMaterial , 
	               GameObject[] obsticlePrefabList ,
	               int historySize ,
	               int numOfHorizontalPointsInRoad ,
	               Transform parent ,
	               float step)
	{
		_step = step;

		_roadWidth = roadWidth;
		_fx = fx;
		_obsticlePrefabList = obsticlePrefabList;
		_FrameLineList = new List<LineFrame>();
		_FramePointList = new List<PointFrame>();

		_lineSize = lineSize;
		_lineMaterial = lineMaterial;

		_historySize = historySize;
		_numOfHorizontalPointsInRoad = numOfHorizontalPointsInRoad;

		_parent = parent;
	}

	/***********************************************************
	**	PUBLIC
	***********************************************************/
	/// <summary>
	/// Clear this instance.
	/// </summary>
	public void Clear(){
		_FrameLineList = new List<LineFrame>();
		_FramePointList = new List<PointFrame>();

		//create new frame for starting point
		Vector3[] v = new Vector3[ numOfHorizontalPointsInRoad ];

		PointFrame pf = new PointFrame( this  , 0 );
		_FramePointList.Add( pf );
		
		_numOfLiveLines = 0;
	}


	/*********************************************
					POINTS
	 *********************************************/

	
	//Adding the lines
	public void addPointFrame( float t ){
		PointFrame pf = new PointFrame( this , t );
		_FramePointList.Add(pf);
		if(_FramePointList.Count < 2){
			return;
		}

		createFrameLines( _FramePointList[_FramePointList.Count - 2 ] , _FramePointList[_FramePointList.Count - 1 ] );
		
		if( _FrameLineList.Count > _historySize ){
			_FrameLineList[0].Delete();
			_FrameLineList.RemoveAt(0);

			_FramePointList[0].Delete();
			_FramePointList.RemoveAt(0);
		}
	}



	/*********************************************
						LINES
	 *********************************************/
	private void createFrameLines( PointFrame from , PointFrame to ){
		LineFrame lineFrame = new LineFrame();
		for(int i = 0 ; i < from.Points.Length ; i++){
			lineFrame.Lines.Add( createLine( from.Points[i] , to.Points[i]) );
		}
		lineFrame.Lines.Add( createLine( to.Points[0], to.Points[ numOfHorizontalPointsInRoad - 1 ] ) );
		
		_FrameLineList.Add( lineFrame );
	}

	//Counts the Lines objects
	private int canvasIndex = 0;
	private GameObject createLine( params Vector3[] points) {
		GameObject canvas = new GameObject("canvas_" + canvasIndex); 
		canvas.transform.parent = _parent;
		canvas.transform.rotation = _parent.rotation;
		
		LineRenderer lines = (LineRenderer) canvas.AddComponent<LineRenderer>();
		lines.material = _lineMaterial;

		lines.useWorldSpace = false;
		lines.SetWidth(_lineSize, _lineSize);
		lines.SetVertexCount( points.Length );
		for(int i = 0 ; i < points.Length ; i++){
			lines.SetPosition(i, points[i]);
		}
		
		canvasIndex++;
		_numOfLiveLines++;
		return canvas;
	}




	//////////////////////////////
	/// 	HELP CLASSES
	//////////////////////////////
	public class PointFrame{
		public static int numOfInstatiatedPrefabs = 0;
		public Vector3[] Points;
		public GameObject[] Prefabs;

		public float t;


		private float 	_widthBetweenPoints;
		private Vector3 _center;// = 	road.fx.Pos( t );
		private Vector3 _dir;// =  	 	road.fx.Dir( t );
		private Vector3 _rightVec;// =  road.fx.Right( t );
		private Vector3 _norm;// = 		road.fx.Norm(t);	
		private float	_ang;

		private Vector3 _rightMostPoint; //The most right point on the road

		public PointFrame( FXRoad road , float t ){
			t = t;
			Points = new Vector3[ road.numOfHorizontalPointsInRoad ];
			if(Points.Length < 2){ //check
				return;
			}
			//Creating points
			
			_center = 	 road.fx.Pos( t );
			_dir =  	 road.fx.Dir( t );
			_rightVec =  road.fx.Right( t );
			_norm = 	 road.fx.Norm(t);	
			_ang = 	 	 road.fx.Ang( t );

			_rightMostPoint =  _center + _rightVec * ( road.roadWidth / 2 ); //The most right point on the road
			_widthBetweenPoints = road.roadWidth / ( road.numOfHorizontalPointsInRoad - 1 ); //the distance between 2 neighbour points in frame
			
			for( int i = 0 ; i < Points.Length ; i++ ){
				Points[i] = _rightMostPoint - ( _rightVec * _widthBetweenPoints * i );
			}
		
			createPrefabs( road  , t );
		}

		public void createPrefabs(  FXRoad road ,float t ){
			float pos = road.fx.posibilityForObject();
			if( Random.value >= pos ){
				return;
			}
			
			int numOfPrefabs = (int)(( road.numOfHorizontalPointsInRoad - 1) * road.fx.posibilityForObjectInFrame());
			
			Prefabs = new GameObject[ numOfPrefabs ];
			
			float height = road.step / 2 ; 
			Vector3 hDir =  road.fx.Pos( t + height  ) - _center ;
			Vector3 wDir = _rightVec * _widthBetweenPoints ;
			
			//hDir - height vector
			//wDir - width vector
			
			Vector3[] randPosition = new Vector3[ road.numOfHorizontalPointsInRoad - 1];


			Vector3 startPoint = _rightMostPoint - wDir/2; //start at the most right point on the road minus the half of the width


	
			//Will work only for even
			//Start random position
			for(int i = 0 ; i < (randPosition.Length) ; i ++){

				randPosition[i] = startPoint - wDir * i + _norm / 8 + hDir ;
			}
			for (int i = 0; i < (randPosition.Length) ; i++) {
				Vector3 temp = randPosition[i];
				int randomIndex = Random.Range(i, randPosition.Length);
				randPosition[i] = randPosition[randomIndex];
				randPosition[randomIndex] = temp;
			} //end random position


			for( int i = 0 ; i < numOfPrefabs ; i++){
				int rand = Random.Range( 0 , road.obsticlePrefabList.Length );
				GameObject prefab =  road.obsticlePrefabList[ rand ]; //choose some prefab

				Prefabs[i] = (GameObject)GameObject.Instantiate( prefab );
				Prefabs[i].transform.localPosition = randPosition[i];
				Prefabs[i].transform.LookAt(randPosition[i] + hDir , _norm );
				Prefabs[i].transform.parent = road.parent;
				Prefabs[i].name = "prefab_" + prefab.name + "_"+ numOfInstatiatedPrefabs;
				numOfInstatiatedPrefabs++;
			}
		}

		public void Delete()  // destructor
		{
			if( Prefabs != null ){
				foreach( GameObject g in Prefabs ){
					numOfInstatiatedPrefabs--;
					GameObject.Destroy(g);
				}
			}
		}
	}
	
	public class LineFrame{
		public List<GameObject> Lines;
		public LineFrame(){
			Lines = new List<GameObject>();
		}
		
		public void Delete()  // destructor
		{
			foreach( GameObject g in Lines ){
				GameObject.Destroy(g);
			}
		}
	}
}


